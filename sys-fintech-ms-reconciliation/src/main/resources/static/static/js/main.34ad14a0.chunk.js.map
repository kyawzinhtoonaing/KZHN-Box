{"version":3,"sources":["app/domain/template/CommonTemplate.tsx","app/domain/rc/RcDomain.tsx","app/domain/rc/page/rchomepage-components/TxComparisonEventHelper.ts","app/domain/rc/page/rchomepage-components/TxComparison.tsx","app/domain/rc/page/rchomepage-components/TxComparisonResult.tsx","app/domain/rc/page/rchomepage-components/UnmatchedReportEventHelper.ts","app/domain/rc/page/rchomepage-components/UnmatchedReport.tsx","features/rc/rcSlice.ts","app/store.ts","app/domain/rc/service/RcService.ts","app/domain/rc/page/RcHomePageEventHelper.ts","app/hooks.ts","app/domain/rc/page/RcHomePage.tsx","app/routeConfig.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CommonTemplate","className","href","id","to","routes","pages","path","elements","forEach","domain","page","push","exact","component","renderSwitches","RcDomain","eventRegistry","TxComparison","prop","htmlFor","type","onChange","event","files","eventHandler","csvFile","eventId","payload","call","ownEventHelper","target","uploadFile1ChangeEventHandler","uploadFile2ChangeEventHandler","onClick","csvFile1","csvFile2","compareButtonClickEventHandler","isComparisonInProgress","role","TxComparisonResult","file1name","file1LineCount","file1MatchCount","file1UnmatchCount","file2name","file2LineCount","file2MatchCount","file2UnmatchCount","unmatchedReportButtonClickEventHandler","UnmatchedReport","unmatchedReportCloseEventHandler","misMatchDetailReports","map","mmReport","index","isFirstTxid","jobTxId","txid","filename","lineno","isPfNameMatched","pfName","isTxDateMatched","txDate","isTxAmtMatched","txAmt","isTxNrtiveMatched","txNrtive","isTxDscptMatched","txDscpt","isTxTypeMatched","txType","isWalletRefMatched","walletRef","rcSlice","createSlice","name","initialState","csvComparisonStatus","brokenIntegrityReports","misMatchSummaryReport","showMisMatchDetailReports","reducers","setCsvFile1","state","action","setCsvFile2","setCsvComparisonStatus","setBrokenIntegrityReports","setMisMatchSummaryReport","setMisMatchDetailReports","setShowMisMatchDetailReports","actions","selectCsvFile1","rc","selectCsvFile2","selectCsvComparisonStatus","selectMisMatchSummaryReport","selectMisMatchDetailReports","selectShowMisMatchDetailReports","store","configureStore","reducer","rcReducer","asyncStartComparisonJob","a","reportContainer","formConfig","headers","rjcFormData","FormData","append","axios","post","reconciliationJobCreationResult","reconciliationJob","data","jeFormData","reportRetrievalUrl","rrConfig","get","reportRetrievalResult","prepareMisMatchDetailReportsForHighlighting","console","log","firstFilename","file1MisMatchDetailReports","file2MisMatchDetailReports","misMatchDetailReport","itCount","len1","length","len2","i","file1MisMatchDetailReport","file2MisMatchDetailReport","isFile1ComeFirst","isFile2ComeFirst","putMismatchHightlightInfo","dispatch","getState","resetHomePageState","useAppSelector","useSelector","RcHomePage","undefined","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34ad14a0.chunk.js","sourcesContent":["import routes from '../../routeConfig';\r\nimport {\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nexport function CommonTemplate() {\r\n    const renderSwitches = ()=>{\r\n        let elements: Array<any> = [];\r\n        \r\n        routes.forEach((domain)=>{\r\n            domain.pages.forEach((page)=>{\r\n                elements.push(\r\n                    <Route key={page.path} exact path={page.path}>\r\n                        <page.component />\r\n                    </Route>\r\n                );\r\n            });\r\n        });\r\n\r\n        return elements;\r\n    };\r\n    return (\r\n        <>\r\n            <header>\r\n                <nav className=\"navbar navbar-dark navbar-expand-md bg-dark\">\r\n                    <div className=\"container-fluid\"><a className=\"navbar-brand\" href=\"#\">Fin Tech</a><button data-bs-toggle=\"collapse\" className=\"navbar-toggler\" data-bs-target=\"#navcol-1\"><span className=\"visually-hidden\">Toggle navigation</span><span className=\"navbar-toggler-icon\"></span></button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navcol-1\">\r\n                            <ul className=\"navbar-nav\">\r\n                                <li className=\"nav-item\"></li>\r\n                                <li className=\"nav-item\"></li>\r\n                                <li className=\"nav-item\"></li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row mt-2\">\r\n                    <div className=\"col-md-3 col-lg-2 d-md-block collapse\" id=\"navcol-1\">\r\n                        <ul className=\"nav nav-tabs flex-column shadow-sm\">\r\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to={routes[0].pages[0].path}>Reconciliation Helper</Link></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-md-9 col-lg-10\">\r\n                        <main>\r\n                            { renderSwitches() }\r\n                        </main>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <footer></footer>\r\n        </>\r\n        \r\n    );\r\n}\r\n","import { CommonTemplate } from '../template/CommonTemplate';\r\n\r\nexport function RcDomain() {\r\n    return (  \r\n        <CommonTemplate />\r\n    );\r\n}","import { ComponentEvent } from '../../../../util/ComponentEventUtil';\r\n\r\n// Other Type Declarations\r\nexport interface UploadFileChangeEvent {\r\n    csvFile: any;\r\n}\r\n\r\nexport interface CompareButtonClickEvent {\r\n    csvFile1: any;\r\n    csvFile2: any;\r\n}\r\n\r\nexport interface UnmatchedReportButtonClickEvent {\r\n\r\n}\r\n\r\n// Envent Registry Declarations\r\nconst eventRegistry: Array<string> = [\r\n    \"TxComparison_ UploadFile1Change_Event\",\r\n    \"TxComparison_ UploadFile2Change_Event\",\r\n    \"TxComparison_ CompareButtonClick_Event\",\r\n    \"TxComparison_ UnmatchedReportButtonClick_Event\"\r\n];\r\n\r\n// Event Handler Function Type Declarations\r\nexport type UploadFileChangeEventHandler = (event: ComponentEvent<UploadFileChangeEvent>) => void;\r\nexport type CompareButtonClickEventHandler = (event: ComponentEvent<CompareButtonClickEvent>) => void;\r\nexport type UnmatchedReportButtonClickEventHandler = (event: ComponentEvent<UnmatchedReportButtonClickEvent>) => void;\r\n\r\n// Event Trigger Functions\r\nexport function triggerUploadFile1ChangeEvent(files: any | null, eventHandler?: UploadFileChangeEventHandler) {\r\n    if (files == null) return;\r\n    const csvFile: any = files[0];\r\n\r\n    let event: ComponentEvent<UploadFileChangeEvent> = {\r\n        eventId: eventRegistry[0],\r\n        payload: { csvFile: csvFile }\r\n    };\r\n    eventHandler?.call(null, event);\r\n}\r\n\r\nexport function triggerUploadFile2ChangeEvent(files: any | null, eventHandler?: UploadFileChangeEventHandler) {\r\n    if (files == null) return;\r\n    const csvFile: any = files[0];\r\n\r\n    let event: ComponentEvent<UploadFileChangeEvent> = {\r\n        eventId: eventRegistry[1],\r\n        payload: { csvFile: csvFile }\r\n    };\r\n    eventHandler?.call(null, event);\r\n}\r\n\r\nexport function triggerCompareButtonClickEvent(csvFile1: any, csvFile2: any, eventHandler?: CompareButtonClickEventHandler) {\r\n    let event: ComponentEvent<CompareButtonClickEvent> = {\r\n        eventId: eventRegistry[2],\r\n        payload: { \r\n            csvFile1: csvFile1,\r\n            csvFile2: csvFile2\r\n        }\r\n    };\r\n    eventHandler?.call(null, event);\r\n}\r\n\r\nexport function triggerUnmatchedReportButtonClickEvent(eventHandler?: UnmatchedReportButtonClickEventHandler) {\r\n    let event: ComponentEvent<UnmatchedReportButtonClickEvent> = {\r\n        eventId: eventRegistry[3],\r\n        payload: {}\r\n    };\r\n    eventHandler?.call(null, event);\r\n}","import * as ownEventHelper from './TxComparisonEventHelper';\r\n\r\n// Prop Type Declaration\r\ninterface Prop {\r\n    csvFile1: any | null;\r\n    csvFile2: any | null;\r\n    isComparisonInProgress: boolean;\r\n    uploadFile1ChangeEventHandler?: ownEventHelper.UploadFileChangeEventHandler;\r\n    uploadFile2ChangeEventHandler?: ownEventHelper.UploadFileChangeEventHandler;\r\n    compareButtonClickEventHandler?: ownEventHelper.CompareButtonClickEventHandler;\r\n}\r\n\r\nexport function TxComparison(prop: Prop) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-header\">\r\n                Specify files to compare\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"uploadFile1\" className=\"form-label\">Select file 1</label>\r\n                    <input type=\"file\" className=\"form-control\" id=\"uploadFile1\"\r\n                        onChange={(event) => {ownEventHelper.triggerUploadFile1ChangeEvent(event.target.files, prop.uploadFile1ChangeEventHandler)}} />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"uploadFile2\" className=\"form-label\">Select file 2</label>\r\n                    <input type=\"file\" className=\"form-control\" id=\"uploadFile2\" \r\n                        onChange={(event) => {ownEventHelper.triggerUploadFile2ChangeEvent(event.target.files, prop.uploadFile2ChangeEventHandler)}} />\r\n                </div>\r\n                <div className=\"col-auto\">\r\n                    <button type=\"button\" className=\"btn btn-dark\"\r\n                        onClick={() => {ownEventHelper.triggerCompareButtonClickEvent(prop.csvFile1, prop.csvFile2, prop.compareButtonClickEventHandler)}}>\r\n                        {prop.isComparisonInProgress &&\r\n                            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                        }\r\n                        Compare\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import * as ownEventHelper from './TxComparisonEventHelper';\r\n\r\n// Prop Type Declaration\r\ninterface Prop {\r\n    file1name: string;\r\n    file1LineCount: number;\r\n    file1MatchCount: number;\r\n    file1UnmatchCount: number;\r\n    file2name: string;\r\n    file2LineCount: number;\r\n    file2MatchCount: number;\r\n    file2UnmatchCount: number;\r\n    unmatchedReportButtonClickEventHandler?: ownEventHelper.UnmatchedReportButtonClickEventHandler;\r\n}\r\n\r\nexport function TxComparisonResult(prop: Prop) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-header\">\r\n                Comparison results\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                        {/*<!-- CSV File1 Summary -->*/}\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <h3 className=\"card-title\">{prop.file1name}</h3>\r\n                                <div className=\"container\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            Total Records:\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            {prop.file1LineCount}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            Matching Records:\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            {prop.file1MatchCount}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            Unmatched Records:\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            {prop.file1UnmatchCount}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                        {/*<!-- CSV File2 Summary -->*/}\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <h3 className=\"card-title\">{prop.file2name}</h3>\r\n                                <div className=\"container\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            Total Records:\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            {prop.file2LineCount}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            Matching Records:\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            {prop.file2MatchCount}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            Unmatched Records:\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            {prop.file2UnmatchCount}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-auto mt-3\">\r\n                    <button type=\"button\" className=\"btn btn-dark\"\r\n                        onClick={()=>{ownEventHelper.triggerUnmatchedReportButtonClickEvent(prop.unmatchedReportButtonClickEventHandler)}}>\r\n                        Unmatched Report\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { ComponentEvent } from '../../../../util/ComponentEventUtil';\r\n\r\n// Other Type Declarations\r\nexport interface UnmatchedReportCloseEvent {\r\n}\r\n\r\n\r\n// Envent Registry Declarations\r\nconst eventRegistry: Array<string> = [\r\n    \"UnmatchedReport_ UnmatchedReportClose_Event\"\r\n];\r\n\r\n\r\n// Event Handler Function Type Declarations\r\nexport type UnmatchedReportCloseEventHandler = (event: ComponentEvent<UnmatchedReportCloseEvent>) => void;\r\n\r\n\r\n// Event Trigger Functions\r\nexport function triggerUnmatchedReportCloseEvent(eventHandler?: UnmatchedReportCloseEventHandler) {\r\n    let event: ComponentEvent<UnmatchedReportCloseEvent> = {\r\n        eventId: eventRegistry[0],\r\n        payload: { }\r\n    };\r\n    eventHandler?.call(null, event);\r\n}","import { JobTxMismatchReport } from '../../common/models/domainModel';\r\nimport * as ownEventHelper from './UnmatchedReportEventHelper';\r\n\r\n// Prop Type Declaration\r\ninterface Prop {\r\n    misMatchDetailReports: Array<JobTxMismatchReport>;\r\n    unmatchedReportCloseEventHandler?: ownEventHelper.UnmatchedReportCloseEventHandler;\r\n}\r\n\r\nexport function UnmatchedReport(prop: Prop) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-header\">\r\n                Unmatched report\r\n                <button type=\"button\" className=\"btn-close position-absolute end-0 me-2\" aria-label=\"Close\"\r\n                    onClick={()=>{ownEventHelper.triggerUnmatchedReportCloseEvent(prop.unmatchedReportCloseEventHandler)}}></button>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-bordered text-nowrap\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Transaction ID</th>\r\n                                <th>File Name</th>\r\n                                <th>Line No.</th>\r\n                                <th>Profile Name</th>\r\n                                <th>Transaction Date</th>\r\n                                <th>Transaction Amount</th>\r\n                                <th>Transaction Narrative</th>\r\n                                <th>Transaction Description</th>\r\n                                <th>Transaction Type</th>\r\n                                <th>Wallet Reference</th>\r\n                            </tr>\r\n                        </thead>                \r\n                        <tbody>\r\n                            {\r\n                                prop.misMatchDetailReports.map((mmReport, index) => {\r\n                                    return (\r\n                                        <tr key={`${mmReport.jobTxId.txid}${mmReport.jobTxId.filename}${mmReport.jobTxId.lineno}`}>\r\n                                            <td>\r\n                                                {index + 1}\r\n                                            </td>\r\n                                            <td>\r\n                                                {mmReport.isFirstTxid \r\n                                                    ? mmReport.jobTxId.txid \r\n                                                    : ''\r\n                                                }\r\n                                            </td>\r\n                                            <td>\r\n                                                {mmReport.jobTxId.filename}\r\n                                            </td>\r\n                                            <td>\r\n                                                {mmReport.jobTxId.lineno}\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                {mmReport.isPfNameMatched \r\n                                                    ? mmReport.pfName\r\n                                                    : <span className=\"bg-warning\">{mmReport.pfName}</span>\r\n                                                }\r\n                                            </td>\r\n                                            <td>\r\n                                                {mmReport.isTxDateMatched\r\n                                                    ? mmReport.txDate\r\n                                                    : <span className=\"bg-warning\">{mmReport.txDate}</span>\r\n                                                }\r\n                                            </td>\r\n                                            <td>\r\n                                                {mmReport.isTxAmtMatched\r\n                                                    ? mmReport.txAmt\r\n                                                    : <span className=\"bg-warning\">{mmReport.txAmt}</span>\r\n                                                }\r\n                                            </td>\r\n                                            <td>\r\n                                                {mmReport.isTxNrtiveMatched\r\n                                                    ? mmReport.txNrtive\r\n                                                    : <span className=\"bg-warning\">{mmReport.txNrtive}</span>\r\n                                                }\r\n                                            </td>\r\n                                            <td>\r\n                                                {mmReport.isTxDscptMatched\r\n                                                    ? mmReport.txDscpt\r\n                                                    : <span className=\"bg-warning\">{mmReport.txDscpt}</span>\r\n                                                }\r\n                                            </td>\r\n                                            <td>\r\n                                                {mmReport.isTxTypeMatched\r\n                                                    ? mmReport.txType\r\n                                                    : <span className=\"bg-warning\">{mmReport.txType}</span>\r\n                                                }\r\n                                            </td>\r\n                                            <td>\r\n                                                {mmReport.isWalletRefMatched\r\n                                                    ? mmReport.walletRef\r\n                                                    : <span className=\"bg-warning\">{mmReport.walletRef}</span>\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport { JobTxBrokenIntegrityReport, JobReportSummary, JobTxMismatchReport } from '../../app/domain/rc/common/models/domainModel';\r\n\r\nexport interface ReconciliationHelperState {\r\n    /* RcHomePage's states */\r\n    csvFile1: any | null;\r\n    csvFile2: any | null;\r\n    // 0 for idle status\r\n    // 1 for in-progress status\r\n    // 2 for finished status\r\n    csvComparisonStatus : 0 | 1 | 2;\r\n    brokenIntegrityReports: Array<JobTxBrokenIntegrityReport> | null;\r\n\tmisMatchSummaryReport: JobReportSummary | null;\r\n\tmisMatchDetailReports: Array<JobTxMismatchReport> | null;\r\n    showMisMatchDetailReports: boolean;\r\n}\r\n\r\nconst initialState : ReconciliationHelperState = {\r\n    csvFile1: null,\r\n    csvFile2: null,\r\n    csvComparisonStatus: 0,\r\n    brokenIntegrityReports: null,\r\n    misMatchSummaryReport: null,\r\n    misMatchDetailReports: null,\r\n    showMisMatchDetailReports: false\r\n};\r\n\r\nexport const rcSlice = createSlice({\r\n    name: 'rc',\r\n    initialState,\r\n    reducers: {\r\n        setCsvFile1: (state, action: PayloadAction<any>) => {\r\n            state.csvFile1 = action.payload;\r\n        },\r\n        setCsvFile2: (state, action: PayloadAction<any>) => {\r\n            state.csvFile2 = action.payload;\r\n        },\r\n        setCsvComparisonStatus: (state, action: PayloadAction<0 | 1 | 2>) => {\r\n            state.csvComparisonStatus = action.payload;\r\n        },\r\n        setBrokenIntegrityReports: (state, action: PayloadAction<Array<JobTxBrokenIntegrityReport> | null>) => {\r\n            state.brokenIntegrityReports = action.payload;\r\n        },\r\n        setMisMatchSummaryReport: (state, action: PayloadAction<JobReportSummary | null>) => {\r\n            state.misMatchSummaryReport = action.payload;\r\n        },\r\n        setMisMatchDetailReports: (state, action: PayloadAction<Array<JobTxMismatchReport> | null>) => {\r\n            state.misMatchDetailReports = action.payload;\r\n        },\r\n        setShowMisMatchDetailReports: (state, action: PayloadAction<boolean>) => {\r\n            state.showMisMatchDetailReports = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { \r\n    setCsvFile1, setCsvFile2, setCsvComparisonStatus, setBrokenIntegrityReports,\r\n    setMisMatchSummaryReport, setMisMatchDetailReports, setShowMisMatchDetailReports\r\n} = rcSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCsvFile1 = (state: RootState) => state.rc.csvFile1;\r\nexport const selectCsvFile2 = (state: RootState) => state.rc.csvFile2;\r\nexport const selectCsvComparisonStatus = (state: RootState) => state.rc.csvComparisonStatus;\r\nexport const selectBrokenIntegrityReports = (state: RootState) => state.rc.brokenIntegrityReports;\r\nexport const selectMisMatchSummaryReport = (state: RootState) => state.rc.misMatchSummaryReport;\r\nexport const selectMisMatchDetailReports = (state: RootState) => state.rc.misMatchDetailReports;\r\nexport const selectShowMisMatchDetailReports = (state: RootState) => state.rc.showMisMatchDetailReports;\r\n\r\nexport default rcSlice.reducer;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport rcReducer from '../features/rc/rcSlice';\n\nexport const store = configureStore({\n  reducer: {\n    rc: rcReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import axios, { AxiosResponse } from 'axios';\r\nimport { Job, ReconciliationReportRetrievalResult, JobTxMismatchReport } from '../common/models/domainModel';\r\n\r\n//const HOST_URL = 'http://localhost:8080';\r\n\r\nexport async function asyncStartComparisonJob(csvFile1: any, csvFile2: any): Promise<ReconciliationReportRetrievalResult | null> {\r\n    let reportContainer: ReconciliationReportRetrievalResult | null = null;\r\n    try {\r\n        const formConfig = {\r\n            headers: {\r\n                'content-type': 'multipart/form-data',\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        // Reconciliation Job Creation\r\n        const reconciliationJobCreationUrl: string = `rc/servicdesk/job`;    \r\n        const rjcFormData = new FormData();\r\n        rjcFormData.append('csvFile1', csvFile1);\r\n        rjcFormData.append('csvFile2', csvFile2); \r\n        let reconciliationJobCreationResult: AxiosResponse;\r\n        let reconciliationJob: Job;\r\n        reconciliationJobCreationResult = await axios.post(reconciliationJobCreationUrl, rjcFormData, formConfig);\r\n        reconciliationJob = reconciliationJobCreationResult.data;\r\n        \r\n        // Reconciliation Job Execution\r\n        const jobExecutionUrl: string = `rc/batchapp/startjob`;\r\n        const jeFormData = new FormData();\r\n        jeFormData.append('jobId', reconciliationJob.id ? reconciliationJob.id : '');\r\n        await axios.post(jobExecutionUrl, jeFormData, formConfig);\r\n\r\n        // Reconciliation Report Retrieval\r\n        const reportRetrievalUrl: string = `rc/servicdesk/reports/${reconciliationJob.id}`;\r\n        const rrConfig = {\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n        let reportRetrievalResult: AxiosResponse;\r\n        \r\n        reportRetrievalResult = await axios.get(reportRetrievalUrl, rrConfig);\r\n        reportContainer = reportRetrievalResult.data;\r\n\r\n        let misMatchDetailReports = reportContainer?.misMatchDetailReports ? reportContainer.misMatchDetailReports : null;\r\n        prepareMisMatchDetailReportsForHighlighting(reconciliationJob.file1name, reconciliationJob.file2name, misMatchDetailReports);\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n    return reportContainer;\r\n}\r\n\r\nfunction prepareMisMatchDetailReportsForHighlighting(file1name: string, file2name: string,\r\n    misMatchDetailReports: Array<JobTxMismatchReport> | null): void {\r\n    if (misMatchDetailReports === null) return;\r\n\r\n    let txid: string = '';\r\n    let firstFilename: string = '';\r\n    let file1MisMatchDetailReports: Array<JobTxMismatchReport> = [];\r\n    let file2MisMatchDetailReports: Array<JobTxMismatchReport> = [];\r\n\r\n    misMatchDetailReports.forEach((misMatchDetailReport) => {\r\n        if (txid !== misMatchDetailReport.jobTxId.txid) {\r\n            let itCount: number = 0;\r\n            let len1: number = file1MisMatchDetailReports.length;\r\n            let len2: number = file2MisMatchDetailReports.length;\r\n            if (len1 === len2) {\r\n                itCount = len1;\r\n            } else {\r\n                itCount = len1 > len2 ? len1 : len2;\r\n            }\r\n            for (let i = 0; i < itCount; i++) {\r\n                let file1MisMatchDetailReport = i < len1 ? file1MisMatchDetailReports[i] : null;\r\n                let file2MisMatchDetailReport = i < len2 ? file2MisMatchDetailReports[i] : null;\r\n\r\n                // If one side of two files lacks of transaction information.\r\n                if (file1MisMatchDetailReport === null || file2MisMatchDetailReport === null) {\r\n                    if (file1MisMatchDetailReport !== null) {\r\n                        putMismatchHightlightInfo(file1MisMatchDetailReport,\r\n                            true, false, false, false, false, false, false, false);\r\n                    } else if (file2MisMatchDetailReport !== null) {\r\n                        putMismatchHightlightInfo(file2MisMatchDetailReport,\r\n                            true, false, false, false, false, false, false, false);\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                // If both side of two files have transaction information.\r\n                // Check if data field on both sides are matched.\r\n                let isPfNameMatched = file1MisMatchDetailReport.pfName === file2MisMatchDetailReport.pfName;\r\n                let isTxDateMatched = file1MisMatchDetailReport.txDate === file2MisMatchDetailReport.txDate;\r\n                let isTxAmtMatched = file1MisMatchDetailReport.txAmt === file2MisMatchDetailReport.txAmt;\r\n                let isTxNrtiveMatched = file1MisMatchDetailReport.txNrtive === file2MisMatchDetailReport.txNrtive;\r\n                let isTxDscptMatched = file1MisMatchDetailReport.txDscpt === file2MisMatchDetailReport.txDscpt;\r\n                let isTxTypeMatched = file1MisMatchDetailReport.txType === file2MisMatchDetailReport.txType;\r\n                let isWalletRefMatched = file1MisMatchDetailReport.walletRef === file2MisMatchDetailReport.walletRef;\r\n                let isFile1ComeFirst = i === 0 && firstFilename === file1MisMatchDetailReport.jobTxId.filename;\r\n                let isFile2ComeFirst = i === 0 && firstFilename === file2MisMatchDetailReport.jobTxId.filename;\r\n                putMismatchHightlightInfo(file1MisMatchDetailReport,\r\n                    isFile1ComeFirst, isPfNameMatched, isTxDateMatched, isTxAmtMatched, isTxNrtiveMatched, isTxDscptMatched, isTxTypeMatched, isWalletRefMatched);\r\n                putMismatchHightlightInfo(file2MisMatchDetailReport,\r\n                    isFile2ComeFirst, isPfNameMatched, isTxDateMatched, isTxAmtMatched, isTxNrtiveMatched, isTxDscptMatched, isTxTypeMatched, isWalletRefMatched);\r\n            }\r\n\r\n            // reset txid and its related data for next transaction ID.\r\n            txid = misMatchDetailReport.jobTxId.txid;\r\n            firstFilename = misMatchDetailReport.jobTxId.filename;\r\n            file1MisMatchDetailReports = firstFilename === file1name ? [misMatchDetailReport] : [];\r\n            file2MisMatchDetailReports = firstFilename === file2name ? [misMatchDetailReport] : [];\r\n        } else {\r\n            let filename = misMatchDetailReport.jobTxId.filename;\r\n            if (filename === file1name) {\r\n                file1MisMatchDetailReports.push(misMatchDetailReport);\r\n            } else if (filename === file2name) {\r\n                file2MisMatchDetailReports.push(misMatchDetailReport);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction putMismatchHightlightInfo(mmReport: JobTxMismatchReport,\r\n    isFirstTxid: boolean,\r\n    isPfNameMatched: boolean,\r\n    isTxDateMatched: boolean,\r\n    isTxAmtMatched: boolean,\r\n    isTxNrtiveMatched: boolean,\r\n    isTxDscptMatched: boolean,\r\n    isTxTypeMatched: boolean,\r\n    isWalletRefMatched: boolean): void {\r\n    \r\n    mmReport.isFirstTxid = isFirstTxid;\r\n    mmReport.isPfNameMatched = isPfNameMatched;\r\n    mmReport.isTxDateMatched = isTxDateMatched;\r\n    mmReport.isTxAmtMatched = isTxAmtMatched;\r\n    mmReport.isTxNrtiveMatched = isTxNrtiveMatched;\r\n    mmReport.isTxDscptMatched = isTxDscptMatched;\r\n    mmReport.isTxTypeMatched = isTxTypeMatched;\r\n    mmReport.isWalletRefMatched = isWalletRefMatched;\r\n}","import { store } from '../../../store';\r\nimport { UploadFileChangeEventHandler, CompareButtonClickEventHandler, \r\n    UnmatchedReportButtonClickEventHandler\r\n} from './rchomepage-components/TxComparisonEventHelper';\r\nimport { UnmatchedReportCloseEventHandler } from './rchomepage-components/UnmatchedReportEventHelper';\r\nimport { \r\n    setCsvFile1, setCsvFile2, setCsvComparisonStatus, setBrokenIntegrityReports,\r\n    setMisMatchSummaryReport, setMisMatchDetailReports, setShowMisMatchDetailReports\r\n} from '../../../../features/rc/rcSlice';\r\nimport { asyncStartComparisonJob } from '../service/RcService';\r\nimport { ReconciliationReportRetrievalResult } from '../common/models/domainModel';\r\n\r\n// Component Events' Handler Functions\r\nexport const uploadFile1ChangeEventHandler: UploadFileChangeEventHandler = (event) => {\r\n    store.dispatch(setCsvFile1(event.payload.csvFile));\r\n\r\n    if (store.getState().rc.csvComparisonStatus !== 0) {\r\n        resetHomePageState();\r\n    }\r\n    \r\n}\r\n\r\nexport const uploadFile2ChangeEventHandler: UploadFileChangeEventHandler = (event) => {\r\n    store.dispatch(setCsvFile2(event.payload.csvFile));\r\n\r\n    if (store.getState().rc.csvComparisonStatus !== 0) {\r\n        resetHomePageState();\r\n    }\r\n}\r\n\r\nexport const compareButtonClickEventHandler: CompareButtonClickEventHandler = async (event) => {\r\n    store.dispatch(setCsvComparisonStatus(1));\r\n    store.dispatch(setBrokenIntegrityReports(null));\r\n    store.dispatch(setMisMatchSummaryReport(null));\r\n    store.dispatch(setMisMatchDetailReports(null));\r\n    store.dispatch(setShowMisMatchDetailReports(false));\r\n\r\n    let reportContainer: ReconciliationReportRetrievalResult | null;\r\n    reportContainer = await asyncStartComparisonJob(event.payload.csvFile1, event.payload.csvFile2);\r\n    store.dispatch(setCsvComparisonStatus(2));\r\n    if (reportContainer !== null) {    \r\n        store.dispatch(setBrokenIntegrityReports(reportContainer.brokenIntegrityReports));\r\n        store.dispatch(setMisMatchSummaryReport(reportContainer.misMatchSummaryReport));\r\n        store.dispatch(setMisMatchDetailReports(reportContainer.misMatchDetailReports));\r\n    }\r\n}\r\n\r\nexport const unmatchedReportButtonClickEventHandler: UnmatchedReportButtonClickEventHandler = (event) => {\r\n    store.dispatch(setShowMisMatchDetailReports(true));\r\n}\r\n\r\nexport const unmatchedReportCloseEventHandler: UnmatchedReportCloseEventHandler = (event) => {\r\n    store.dispatch(setShowMisMatchDetailReports(false));\r\n}\r\n\r\nfunction resetHomePageState() {\r\n    store.dispatch(setCsvComparisonStatus(0));\r\n    store.dispatch(setBrokenIntegrityReports(null));\r\n    store.dispatch(setMisMatchSummaryReport(null));\r\n    store.dispatch(setMisMatchDetailReports(null));\r\n    store.dispatch(setShowMisMatchDetailReports(false))\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { TxComparison } from './rchomepage-components/TxComparison';\r\nimport { TxComparisonResult } from './rchomepage-components/TxComparisonResult';\r\nimport { UnmatchedReport } from './rchomepage-components/UnmatchedReport';\r\nimport { uploadFile1ChangeEventHandler, uploadFile2ChangeEventHandler, \r\n    compareButtonClickEventHandler, unmatchedReportButtonClickEventHandler, unmatchedReportCloseEventHandler\r\n} from './RcHomePageEventHelper';\r\nimport { useAppSelector } from '../../../../app/hooks';\r\nimport { selectCsvFile1, selectCsvFile2, selectCsvComparisonStatus, selectMisMatchSummaryReport, \r\n    selectMisMatchDetailReports, selectShowMisMatchDetailReports \r\n} from '../../../../features/rc/rcSlice';\r\n\r\nexport function RcHomePage() {\r\n    const csvFile1 = useAppSelector(selectCsvFile1);\r\n    const csvFile2 = useAppSelector(selectCsvFile2);\r\n    const isComparisonInProgress = useAppSelector(selectCsvComparisonStatus);\r\n    const misMatchSummaryReport = useAppSelector(selectMisMatchSummaryReport);\r\n    const misMatchDetailReports = useAppSelector(selectMisMatchDetailReports);\r\n    const showMisMatchDetailReports = useAppSelector(selectShowMisMatchDetailReports);\r\n\r\n    return (\r\n        <>\r\n            <h4 className=\"text-start\">Reconciliation Helper</h4>\r\n            <hr />\r\n\r\n            <TxComparison\r\n                csvFile1={csvFile1}\r\n                csvFile2={csvFile2}\r\n                isComparisonInProgress={isComparisonInProgress === 1}\r\n                uploadFile1ChangeEventHandler={uploadFile1ChangeEventHandler}\r\n                uploadFile2ChangeEventHandler={uploadFile2ChangeEventHandler}\r\n                compareButtonClickEventHandler={compareButtonClickEventHandler} />\r\n\r\n            <hr />\r\n\r\n            {misMatchSummaryReport &&\r\n                <><TxComparisonResult\r\n                    file1name={misMatchSummaryReport.file1name ? misMatchSummaryReport.file1name : ''}\r\n                    file1LineCount={misMatchSummaryReport.file1LineCount ? misMatchSummaryReport.file1LineCount : 0}\r\n                    file1MatchCount={misMatchSummaryReport.file1MatchCount ? misMatchSummaryReport.file1MatchCount : 0}\r\n                    file1UnmatchCount={misMatchSummaryReport.file1UnmatchCount ? misMatchSummaryReport.file1UnmatchCount : 0}\r\n                    file2name={misMatchSummaryReport.file2name ? misMatchSummaryReport.file2name : ''}\r\n                    file2LineCount={misMatchSummaryReport.file2LineCount ? misMatchSummaryReport.file2LineCount : 0}\r\n                    file2MatchCount={misMatchSummaryReport.file2MatchCount ? misMatchSummaryReport.file2MatchCount : 0}\r\n                    file2UnmatchCount={misMatchSummaryReport.file2UnmatchCount ? misMatchSummaryReport.file2UnmatchCount : 0}\r\n                    unmatchedReportButtonClickEventHandler={unmatchedReportButtonClickEventHandler} />\r\n\r\n                <hr /></>\r\n            }\r\n\r\n            {(misMatchDetailReports !== null \r\n            && misMatchDetailReports !== undefined \r\n            && misMatchDetailReports.length > 0\r\n            && showMisMatchDetailReports) &&\r\n                <><UnmatchedReport \r\n                    misMatchDetailReports={misMatchDetailReports} \r\n                    unmatchedReportCloseEventHandler={unmatchedReportCloseEventHandler} />\r\n                    \r\n                <hr /></>\r\n            }\r\n        </>\r\n    );\r\n}","import { RcDomain } from './domain/rc/RcDomain';\r\nimport { RcHomePage } from './domain/rc/page/RcHomePage';\r\n\r\ninterface Page {\r\n  path: string;\r\n  component: any;\r\n}\r\n\r\ninterface Domain {\r\n  path: string;\r\n  component: any;\r\n  pages: Array<Page>\r\n}\r\n\r\nconst routes: Array<Domain> = [\r\n  {\r\n    path: \"/rc\",\r\n    component: RcDomain,\r\n    pages: [\r\n      {\r\n        path: \"/rc/index\",\r\n        component: RcHomePage\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: \"/\",\r\n    component: RcDomain,\r\n    pages: [\r\n      {\r\n        path: \"/\",\r\n        component: RcHomePage\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default routes;","import {\n  HashRouter as Router,\n  //BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport routes from './app/routeConfig';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        {routes.map((domain)=>{\n          return (\n            <Route key={domain.path} path={domain.path}>\n              <domain.component />\n            </Route>\n          );\n        })}\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.bundle'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}